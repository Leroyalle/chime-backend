generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model VerificationCode {
  id        String    @id @default(uuid())
  code      String
  expiresAt DateTime
  userId    String
  user      EmailUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model UserBase {
  id     String  @id @default(uuid())
  banned Boolean @default(false)
  role   String  @default("user")

  about    String?
  age      Int?
  location String?
  status   String?
  name     String  @default("User")
  alias    String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EmailUser    EmailUser?
  TelegramUser TelegramUser?
  GoogleUser   GoogleUser?

  posts    Post[]
  likes    Like[]
  comments Comment[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
  Message   Message[]

  Chats Chat[]
}

model EmailUser {
  id       String  @id @default(uuid())
  email    String  @unique
  password String?

  userBaseId String   @unique
  userBase   UserBase @relation(fields: [userBaseId], references: [id])

  VerificationCode VerificationCode[]
}

model TelegramUser {
  id         String @id @default(uuid())
  telegramId String @unique

  firstName String
  username  String
  photoUrl  String
  authDate  DateTime

  userBaseId String   @unique
  userBase   UserBase @relation(fields: [userBaseId], references: [id])
}

model GoogleUser {
  id    String @id @default(uuid())
  email String @unique

  name      String
  givenName String

  photoUrl String

  userBaseId String   @unique
  userBase   UserBase @relation(fields: [userBaseId], references: [id])
}

model Post {
  id       String  @id @default(uuid())
  content  String
  imageUrl String?

  authorId String
  author   UserBase @relation(fields: [authorId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
}

model Like {
  id     String   @id @default(uuid())
  userId String
  user   UserBase @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id      String @id @default(uuid())
  content String

  userId String
  user   UserBase @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follows {
  id         String   @id @default(uuid())
  followerId String
  follower   UserBase @relation("follower", fields: [followerId], references: [id])

  followingId String
  following   UserBase @relation("following", fields: [followingId], references: [id])
}

// _______________________

model Chat {
  id String @id @default(uuid())

  name     String
  imageUrl String?

  lastMessageAt DateTime?

  members  UserBase[]
  messages Message[]

  createdAt DateTime @default(now())

  @@index([lastMessageAt])
}

model Message {
  id   String @id @default(uuid())
  body String

  Chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String

  UserBase   UserBase @relation(fields: [userBaseId], references: [id], onDelete: Cascade)
  userBaseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// id: string,
// socketId: string,
// body: string,
// time: string,
// userId: string
